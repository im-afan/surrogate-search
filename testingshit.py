# -*- coding: utf-8 -*-
"""testing if spikingjelly resnet works

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJVT967-JRKtj60AjmfTKNaWXUv0MxSp
"""

# Install necessary libraries
!pip install torch torchvision spikingjelly tensorboard

# Import libraries
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from spikingjelly.activation_based import neuron, functional, surrogate
from spikingjelly.activation_based.model import spiking_resnet
from torch.utils.tensorboard import SummaryWriter

# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyperparameters
num_epochs = 10
learning_rate = 0.01
batch_size = 4
timesteps = 10

# Data augmentation and normalization for training
transform = transforms.Compose([
    transforms.RandomResizedCrop(224),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),
])

# Load datasets
train_dataset = datasets.CIFAR10(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)

test_dataset = datasets.CIFAR10(root='./data', train=False, transform=transform, download=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=4)

# Initialize the Spiking ResNet-18 model
model = spiking_resnet.spiking_resnet18(pretrained=False, spiking_neuron=neuron.IFNode, surrogate_function=surrogate.ATan(), detach_reset=True)
model.to(device)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9, weight_decay=5e-4)
scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=num_epochs)

# TensorBoard writer
writer = SummaryWriter()

def train(model, train_loader, criterion, optimizer, epoch):
    model.train()
    running_loss = 0.0
    for i, (inputs, targets) in enumerate(train_loader):
        inputs, targets = inputs.to(device), targets.to(device)

        # Add time dimension to inputs
        inputs = inputs.unsqueeze(0).repeat(timesteps, 1, 1, 1, 1)

        # Forward pass
        optimizer.zero_grad()
        functional.set_step_mode(model, 'm')
        outputs = model(inputs)
        loss = criterion(outputs.mean(0), targets)

        # Backward and optimize
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if (i + 1) % 100 == 0:
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{len(train_loader)}], Loss: {loss.item():.4f}')

        # Reset the state of the model
        functional.reset_net(model)

    return running_loss / len(train_loader)

def test(model, test_loader, criterion):
    model.eval()
    correct = 0
    total = 0
    test_loss = 0.0
    with torch.no_grad():
        for inputs, targets in test_loader:
            inputs, targets = inputs.to(device), targets.to(device)

            # Add time dimension to inputs
            inputs = inputs.unsqueeze(0).repeat(timesteps, 1, 1, 1, 1)

            functional.set_step_mode(model, 'm')
            outputs = model(inputs)
            loss = criterion(outputs.mean(0), targets)
            test_loss += loss.item()

            _, predicted = outputs.mean(0).max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()

            # Reset the state of the model
            functional.reset_net(model)

    acc = 100. * correct / total
    test_loss = test_loss / len(test_loader)
    print(f'Test Accuracy: {acc:.4f} %, Test Loss: {test_loss:.4f}')
    return acc, test_loss

# Training the model
for epoch in range(num_epochs):
    train_loss = train(model, train_loader, criterion, optimizer, epoch)
    test_acc, test_loss = test(model, test_loader, criterion)
    scheduler.step()

    # Logging
    writer.add_scalar('Loss/train', train_loss, epoch)
    writer.add_scalar('Loss/test', test_loss, epoch)
    writer.add_scalar('Accuracy/test', test_acc, epoch)

    # Save model checkpoint
    torch.save(model.state_dict(), f'./spiking_resnet18_epoch{epoch}.pth')

writer.close()